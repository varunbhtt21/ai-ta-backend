[project]
name = "ai-ta-backend"
version = "0.1.0"
description = "AI Python Tutoring System Backend"
authors = [
    {name = "AI-TA Team", email = "team@aita.com"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # FastAPI and ASGI
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    # Database
    "motor>=3.3.0", # Async MongoDB driver
    "pymongo>=4.6.0", # MongoDB driver
    "beanie>=1.24.0", # ODM for MongoDB
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    # AI Integration
    "openai>=1.35.0",
    "tiktoken>=0.5.1", # Token counting
    # Caching
    "redis>=5.0.0",
    "aioredis>=2.0.1",
    # Data Validation & Serialization
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # HTTP Requests
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    # File Processing
    "python-markdown>=3.5.0",
    "pyyaml>=6.0.1",
    # Environment & Configuration
    "python-dotenv>=1.0.0",
    # Utilities
    "python-dateutil>=2.8.2",
    "email-validator>=2.1.0",
    # Monitoring & Logging
    "structlog>=23.2.0",
    # Performance
    "orjson>=3.9.0", # Fast JSON serialization
    "bcrypt",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",  # For testing FastAPI
    
    # Code Quality
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    
    # Development Tools
    "pre-commit>=3.5.0",
    "watchfiles>=0.21.0",
]

prod = [
    # Production ASGI server
    "gunicorn>=21.2.0",
    
    # Production monitoring
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
